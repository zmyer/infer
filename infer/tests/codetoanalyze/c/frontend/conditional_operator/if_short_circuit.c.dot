/* @generated */
digraph iCFG {
"test_loop.254a9d372f8f45542e409771135b9322_1" [label="1: Start test_loop\nFormals: \nLocals:  block_size:char* spec:char* \n   DECLARE_LOCALS(&return,&block_size,&spec); [line 29, column 1]\n " color=yellow style=filled]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_1" -> "test_loop.254a9d372f8f45542e409771135b9322_13" ;
"test_loop.254a9d372f8f45542e409771135b9322_2" [label="2: Exit test_loop \n  " color=yellow style=filled]
	

"test_loop.254a9d372f8f45542e409771135b9322_3" [label="3: + \n  " ]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_3" -> "test_loop.254a9d372f8f45542e409771135b9322_4" ;
	 "test_loop.254a9d372f8f45542e409771135b9322_3" -> "test_loop.254a9d372f8f45542e409771135b9322_5" ;
"test_loop.254a9d372f8f45542e409771135b9322_4" [label="4: Prune (true branch) \n   n$0=*&spec:char* [line 36, column 12]\n  PRUNE(!n$0, true); [line 36, column 12]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_4" -> "test_loop.254a9d372f8f45542e409771135b9322_6" ;
"test_loop.254a9d372f8f45542e409771135b9322_5" [label="5: Prune (false branch) \n   n$0=*&spec:char* [line 36, column 12]\n  PRUNE(n$0, false); [line 36, column 12]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_5" -> "test_loop.254a9d372f8f45542e409771135b9322_2" ;
"test_loop.254a9d372f8f45542e409771135b9322_6" [label="6:  BinaryOperatorStmt: Assign \n   n$1=_fun_getenv(\"BLOCK_SIZE\":char const *) [line 36, column 29]\n  *&spec:char*=n$1 [line 36, column 22]\n  n$2=*&spec:char* [line 36, column 22]\n " shape="box"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_6" -> "test_loop.254a9d372f8f45542e409771135b9322_7" ;
	 "test_loop.254a9d372f8f45542e409771135b9322_6" -> "test_loop.254a9d372f8f45542e409771135b9322_8" ;
"test_loop.254a9d372f8f45542e409771135b9322_7" [label="7: Prune (true branch) \n   PRUNE(!n$2, true); [line 36, column 22]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_7" -> "test_loop.254a9d372f8f45542e409771135b9322_9" ;
"test_loop.254a9d372f8f45542e409771135b9322_8" [label="8: Prune (false branch) \n   PRUNE(n$2, false); [line 36, column 22]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_8" -> "test_loop.254a9d372f8f45542e409771135b9322_2" ;
"test_loop.254a9d372f8f45542e409771135b9322_9" [label="9:  BinaryOperatorStmt: Assign \n   n$3=_fun_getenv(\"BLOCKSIZE\":char const *) [line 37, column 20]\n  *&spec:char*=n$3 [line 37, column 13]\n  n$4=*&spec:char* [line 37, column 13]\n " shape="box"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_9" -> "test_loop.254a9d372f8f45542e409771135b9322_10" ;
	 "test_loop.254a9d372f8f45542e409771135b9322_9" -> "test_loop.254a9d372f8f45542e409771135b9322_11" ;
"test_loop.254a9d372f8f45542e409771135b9322_10" [label="10: Prune (true branch) \n   PRUNE(!n$4, true); [line 37, column 13]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_10" -> "test_loop.254a9d372f8f45542e409771135b9322_12" ;
"test_loop.254a9d372f8f45542e409771135b9322_11" [label="11: Prune (false branch) \n   PRUNE(n$4, false); [line 37, column 13]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_11" -> "test_loop.254a9d372f8f45542e409771135b9322_2" ;
"test_loop.254a9d372f8f45542e409771135b9322_12" [label="12:  BinaryOperatorStmt: Assign \n   *&block_size:char*=null [line 38, column 5]\n " shape="box"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_12" -> "test_loop.254a9d372f8f45542e409771135b9322_3" ;
"test_loop.254a9d372f8f45542e409771135b9322_13" [label="13:  BinaryOperatorStmt: Assign \n   n$5=_fun_getenv(\"BLOCK\":char const *) [line 34, column 10]\n  *&spec:char*=n$5 [line 34, column 3]\n " shape="box"]
	

	 "test_loop.254a9d372f8f45542e409771135b9322_13" -> "test_loop.254a9d372f8f45542e409771135b9322_3" ;
"main.fad58de7366495db4650cfefac2fcd61_1" [label="1: Start main\nFormals: \nLocals:  block_size:char* spec:char* \n   DECLARE_LOCALS(&return,&block_size,&spec); [line 42, column 1]\n " color=yellow style=filled]
	

	 "main.fad58de7366495db4650cfefac2fcd61_1" -> "main.fad58de7366495db4650cfefac2fcd61_19" ;
"main.fad58de7366495db4650cfefac2fcd61_2" [label="2: Exit main \n  " color=yellow style=filled]
	

"main.fad58de7366495db4650cfefac2fcd61_3" [label="3:  Return Stmt \n   *&return:int=0 [line 56, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_3" -> "main.fad58de7366495db4650cfefac2fcd61_2" ;
"main.fad58de7366495db4650cfefac2fcd61_4" [label="4: + \n  " ]
	

	 "main.fad58de7366495db4650cfefac2fcd61_4" -> "main.fad58de7366495db4650cfefac2fcd61_3" ;
"main.fad58de7366495db4650cfefac2fcd61_5" [label="5: Prune (true branch) \n   n$0=*&spec:char* [line 49, column 8]\n  PRUNE(!n$0, true); [line 49, column 8]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_5" -> "main.fad58de7366495db4650cfefac2fcd61_7" ;
"main.fad58de7366495db4650cfefac2fcd61_6" [label="6: Prune (false branch) \n   n$0=*&spec:char* [line 49, column 8]\n  PRUNE(n$0, false); [line 49, column 8]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_6" -> "main.fad58de7366495db4650cfefac2fcd61_15" ;
"main.fad58de7366495db4650cfefac2fcd61_7" [label="7:  BinaryOperatorStmt: Assign \n   n$1=_fun_getenv(\"BLOCK_SIZE\":char const *) [line 49, column 25]\n  *&spec:char*=n$1 [line 49, column 18]\n  n$2=*&spec:char* [line 49, column 18]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_7" -> "main.fad58de7366495db4650cfefac2fcd61_8" ;
	 "main.fad58de7366495db4650cfefac2fcd61_7" -> "main.fad58de7366495db4650cfefac2fcd61_9" ;
"main.fad58de7366495db4650cfefac2fcd61_8" [label="8: Prune (true branch) \n   PRUNE(!n$2, true); [line 49, column 18]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_8" -> "main.fad58de7366495db4650cfefac2fcd61_10" ;
"main.fad58de7366495db4650cfefac2fcd61_9" [label="9: Prune (false branch) \n   PRUNE(n$2, false); [line 49, column 18]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_9" -> "main.fad58de7366495db4650cfefac2fcd61_15" ;
"main.fad58de7366495db4650cfefac2fcd61_10" [label="10:  BinaryOperatorStmt: Assign \n   n$3=_fun_getenv(\"BLOCKSIZE\":char const *) [line 49, column 59]\n  *&spec:char*=n$3 [line 49, column 52]\n  n$4=*&spec:char* [line 49, column 52]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_10" -> "main.fad58de7366495db4650cfefac2fcd61_11" ;
	 "main.fad58de7366495db4650cfefac2fcd61_10" -> "main.fad58de7366495db4650cfefac2fcd61_12" ;
"main.fad58de7366495db4650cfefac2fcd61_11" [label="11: Prune (true branch) \n   PRUNE(!n$4, true); [line 49, column 52]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_11" -> "main.fad58de7366495db4650cfefac2fcd61_13" ;
"main.fad58de7366495db4650cfefac2fcd61_12" [label="12: Prune (false branch) \n   PRUNE(n$4, false); [line 49, column 52]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_12" -> "main.fad58de7366495db4650cfefac2fcd61_15" ;
"main.fad58de7366495db4650cfefac2fcd61_13" [label="13:  BinaryOperatorStmt: Assign \n   *&block_size:char*=null [line 50, column 5]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_13" -> "main.fad58de7366495db4650cfefac2fcd61_4" ;
"main.fad58de7366495db4650cfefac2fcd61_14" [label="14: + \n  " ]
	

	 "main.fad58de7366495db4650cfefac2fcd61_14" -> "main.fad58de7366495db4650cfefac2fcd61_4" ;
"main.fad58de7366495db4650cfefac2fcd61_15" [label="15:  BinaryOperatorStmt: EQ \n   n$5=*&spec:char* [line 52, column 10]\n  n$6=*n$5:char [line 52, column 9]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_15" -> "main.fad58de7366495db4650cfefac2fcd61_16" ;
	 "main.fad58de7366495db4650cfefac2fcd61_15" -> "main.fad58de7366495db4650cfefac2fcd61_17" ;
"main.fad58de7366495db4650cfefac2fcd61_16" [label="16: Prune (true branch) \n   PRUNE((n$6 == 39), true); [line 52, column 9]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_16" -> "main.fad58de7366495db4650cfefac2fcd61_18" ;
"main.fad58de7366495db4650cfefac2fcd61_17" [label="17: Prune (false branch) \n   PRUNE(!(n$6 == 39), false); [line 52, column 9]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_17" -> "main.fad58de7366495db4650cfefac2fcd61_14" ;
"main.fad58de7366495db4650cfefac2fcd61_18" [label="18:  BinaryOperatorStmt: Assign \n   *&block_size:char*=null [line 53, column 7]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_18" -> "main.fad58de7366495db4650cfefac2fcd61_14" ;
"main.fad58de7366495db4650cfefac2fcd61_19" [label="19:  BinaryOperatorStmt: Assign \n   n$7=_fun_getenv(\"BLOCK\":char const *) [line 47, column 10]\n  *&spec:char*=n$7 [line 47, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_19" -> "main.fad58de7366495db4650cfefac2fcd61_5" ;
	 "main.fad58de7366495db4650cfefac2fcd61_19" -> "main.fad58de7366495db4650cfefac2fcd61_6" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_1" [label="1: Start shortcircuit_or\nFormals:  x:int*\nLocals:  \n   DECLARE_LOCALS(&return); [line 12, column 1]\n " color=yellow style=filled]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_1" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_5" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_2" [label="2: Exit shortcircuit_or \n  " color=yellow style=filled]
	

"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_3" [label="3: + \n  " ]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_3" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_4" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_4" [label="4:  between_join_and_exit \n  " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_4" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_2" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_5" [label="5:  BinaryOperatorStmt: EQ \n   n$0=*&x:int* [line 14, column 7]\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_5" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_6" ;
	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_5" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_7" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_6" [label="6: Prune (true branch) \n   PRUNE((n$0 == null), true); [line 14, column 7]\n " shape="invhouse"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_6" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_11" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_7" [label="7: Prune (false branch) \n   PRUNE(!(n$0 == null), false); [line 14, column 7]\n " shape="invhouse"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_7" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_8" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_8" [label="8:  BinaryOperatorStmt: EQ \n   n$1=*&x:int* [line 14, column 18]\n  n$2=*n$1:int [line 14, column 17]\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_8" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_9" ;
	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_8" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_10" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_9" [label="9: Prune (true branch) \n   PRUNE((n$2 == 2), true); [line 14, column 17]\n " shape="invhouse"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_9" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_11" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_10" [label="10: Prune (false branch) \n   PRUNE(!(n$2 == 2), false); [line 14, column 17]\n " shape="invhouse"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_10" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_12" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_11" [label="11:  BinaryOperatorStmt: Assign \n   *&x:int*=17 [line 15, column 5]\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_11" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_3" ;
"shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_12" [label="12:  BinaryOperatorStmt: Assign \n   *&x:int*=32 [line 17, column 5]\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_12" -> "shortcircuit_or.5845fe75b89f8af7ec1944cd207962af_3" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_1" [label="1: Start shortcircuit_and\nFormals:  x:int*\nLocals:  \n   DECLARE_LOCALS(&return); [line 21, column 1]\n " color=yellow style=filled]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_1" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_5" ;
	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_1" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_6" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_2" [label="2: Exit shortcircuit_and \n  " color=yellow style=filled]
	

"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_3" [label="3: + \n  " ]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_3" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_4" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_4" [label="4:  between_join_and_exit \n  " shape="box"]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_4" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_2" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_5" [label="5: Prune (true branch) \n   n$0=*&x:int* [line 22, column 8]\n  PRUNE(!n$0, true); [line 22, column 8]\n " shape="invhouse"]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_5" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_7" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_6" [label="6: Prune (false branch) \n   n$0=*&x:int* [line 22, column 8]\n  PRUNE(n$0, false); [line 22, column 8]\n " shape="invhouse"]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_6" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_11" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_7" [label="7:  BinaryOperatorStmt: Assign \n   n$1=_fun_getenv(\"BLOCK\":char const *) [line 22, column 19]\n  *&x:int*=n$1 [line 22, column 15]\n  n$2=*&x:int* [line 22, column 15]\n " shape="box"]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_7" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_8" ;
	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_7" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_9" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_8" [label="8: Prune (true branch) \n   PRUNE(!n$2, true); [line 22, column 15]\n " shape="invhouse"]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_8" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_10" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_9" [label="9: Prune (false branch) \n   PRUNE(n$2, false); [line 22, column 15]\n " shape="invhouse"]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_9" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_11" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_10" [label="10:  BinaryOperatorStmt: Assign \n   *&x:int*=17 [line 23, column 5]\n " shape="box"]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_10" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_3" ;
"shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_11" [label="11:  BinaryOperatorStmt: Assign \n   n$3=*&x:int* [line 25, column 6]\n  *n$3:int=32 [line 25, column 5]\n " shape="box"]
	

	 "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_11" -> "shortcircuit_and.10f9635d805ff3bd29dfc80b8f8d12da_3" ;
}
